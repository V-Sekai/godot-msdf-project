[gd_resource type="VisualShader" load_steps=32 format=2]

[ext_resource path="res://icon_white.svg" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarConstant" id=1]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 6

[sub_resource type="VisualShaderNodeScalarOp" id=3]
output_port_for_preview = 0
operator = 7

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
operator = 6

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
operator = 6

[sub_resource type="VisualShaderNodeScalarOp" id=6]
output_port_for_preview = 0
operator = 7

[sub_resource type="VisualShaderNodeVectorDecompose" id=7]

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=9]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=10]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "texture_pixel_size"

[sub_resource type="VisualShaderNodeScalarOp" id=12]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=13]
output_port_for_preview = 0
function = 18

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "color"

[sub_resource type="VisualShaderNodeTexture" id=15]
source = 2

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "texture"

[sub_resource type="VisualShaderNodeVectorDecompose" id=17]

[sub_resource type="VisualShaderNodeVectorCompose" id=18]

[sub_resource type="VisualShaderNodeScalarUniform" id=29]
uniform_name = "PixelRangePlus4"

[sub_resource type="VisualShaderNodeScalarOp" id=30]
default_input_values = [ 0, 0.0, 1, 4.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=31]
operator = 7

[sub_resource type="VisualShaderNodeVectorOp" id=20]
operator = 2

[sub_resource type="VisualShaderNodeDotProduct" id=21]

[sub_resource type="VisualShaderNodeVectorFunc" id=22]
function = 6

[sub_resource type="VisualShaderNodeVectorDerivativeFunc" id=23]

[sub_resource type="VisualShaderNodeInput" id=24]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=25]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=26]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=27]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=28]
input_name = "color"

[resource]
code = "shader_type canvas_item;
uniform float PixelRangePlus4;



void vertex() {
// Output:0

}

void fragment() {
// Input:24
	vec3 n_out24p0 = COLOR.rgb;

// Input:26

// Texture:25
	vec3 n_out25p0;
	float n_out25p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out25p0 = _tex_read.rgb;
		n_out25p1 = _tex_read.a;
	}

// VectorDecompose:16
	float n_out16p0 = n_out25p0.x;
	float n_out16p1 = n_out25p0.y;
	float n_out16p2 = n_out25p0.z;

// ScalarOp:15
	float n_out15p0 = min(n_out16p0, n_out16p1);

// ScalarOp:14
	float n_out14p0 = max(n_out16p0, n_out16p1);

// ScalarOp:12
	float n_out12p0 = min(n_out14p0, n_out16p2);

// ScalarOp:13
	float n_out13p0 = max(n_out15p0, n_out12p0);

// ScalarOp:32
	float n_out32p0 = min(n_out13p0, n_out25p1);

// ScalarOp:18
	float n_in18p1 = 0.50000;
	float n_out18p0 = n_out32p0 - n_in18p1;

// ScalarUniform:29
	float n_out29p0 = PixelRangePlus4;

// ScalarOp:31
	float n_in31p1 = 4.00000;
	float n_out31p0 = n_out29p0 + n_in31p1;

// Input:2
	vec3 n_out2p0 = vec3(TEXTURE_PIXEL_SIZE, 1.0);

// VectorOp:4
	vec3 n_out4p0 = vec3(n_out31p0) * n_out2p0;

// Scalar:10
	float n_out10p0 = 0.500000;

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// VectorDerivativeFunc:7
	vec3 n_out7p0 = fwidth(n_out8p0);

// VectorFunc:6
	vec3 n_out6p0 = abs(n_out7p0);

// VectorOp:9
	vec3 n_out9p0 = vec3(n_out10p0) / n_out6p0;

// VectorDecompose:27
	float n_out27p0 = n_out9p0.x;
	float n_out27p1 = n_out9p0.y;
	float n_out27p2 = n_out9p0.z;

// VectorCompose:28
	float n_in28p2 = 0.00000;
	vec3 n_out28p0 = vec3(n_out27p0, n_out27p1, n_in28p2);

// DotProduct:5
	float n_out5p0 = dot(n_out4p0, n_out28p0);

// ScalarOp:11
	float n_in11p1 = 1.00000;
	float n_out11p0 = max(n_out5p0, n_in11p1);

// ScalarOp:19
	float n_out19p0 = n_out18p0 * n_out11p0;

// ScalarOp:20
	float n_in20p1 = 0.50000;
	float n_out20p0 = n_out19p0 + n_in20p1;

// ScalarFunc:21
	float n_out21p0 = min(max(n_out20p0, 0.0), 1.0);

// Output:0
	COLOR.rgb = n_out24p0;
	COLOR.a = n_out21p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -938.688, -409.312 )
mode = 1
flags/light_only = false
nodes/vertex/2/node = SubResource( 26 )
nodes/vertex/2/position = Vector2( 200, 140 )
nodes/vertex/3/node = SubResource( 27 )
nodes/vertex/3/position = Vector2( 260, 220 )
nodes/vertex/4/node = SubResource( 28 )
nodes/vertex/4/position = Vector2( 220, 280 )
nodes/fragment/0/position = Vector2( 1240, -80 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( -520, 160 )
nodes/fragment/4/node = SubResource( 20 )
nodes/fragment/4/position = Vector2( -180, 80 )
nodes/fragment/5/node = SubResource( 21 )
nodes/fragment/5/position = Vector2( 140, 180 )
nodes/fragment/6/node = SubResource( 22 )
nodes/fragment/6/position = Vector2( -280, 280 )
nodes/fragment/7/node = SubResource( 23 )
nodes/fragment/7/position = Vector2( -540, 280 )
nodes/fragment/8/node = SubResource( 24 )
nodes/fragment/8/position = Vector2( -720, 280 )
nodes/fragment/9/node = SubResource( 25 )
nodes/fragment/9/position = Vector2( -80, 220 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -280, 220 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 320, 140 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -100, -80 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 80, -220 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -320, -160 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -160, -440 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -580, -260 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -1060, -160 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 300, -200 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( 480, -40 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( 680, -40 )
nodes/fragment/21/node = SubResource( 13 )
nodes/fragment/21/position = Vector2( 860, -20 )
nodes/fragment/24/node = SubResource( 14 )
nodes/fragment/24/position = Vector2( 880, -120 )
nodes/fragment/25/node = SubResource( 15 )
nodes/fragment/25/position = Vector2( -860, -240 )
nodes/fragment/26/node = SubResource( 16 )
nodes/fragment/26/position = Vector2( -1200, -300 )
nodes/fragment/27/node = SubResource( 17 )
nodes/fragment/27/position = Vector2( -160, 380 )
nodes/fragment/28/node = SubResource( 18 )
nodes/fragment/28/position = Vector2( 100, 380 )
nodes/fragment/29/node = SubResource( 29 )
nodes/fragment/29/position = Vector2( -740, 40 )
nodes/fragment/31/node = SubResource( 30 )
nodes/fragment/31/position = Vector2( -480, 20 )
nodes/fragment/32/node = SubResource( 31 )
nodes/fragment/32/position = Vector2( 500, -400 )
nodes/fragment/connections = PoolIntArray( 7, 0, 6, 0, 10, 0, 9, 0, 6, 0, 9, 1, 16, 0, 14, 0, 16, 1, 14, 1, 16, 2, 12, 1, 14, 0, 12, 0, 16, 0, 15, 0, 16, 1, 15, 1, 12, 0, 13, 1, 15, 0, 13, 0, 18, 0, 19, 0, 11, 0, 19, 1, 19, 0, 20, 0, 20, 0, 21, 0, 24, 0, 0, 0, 2, 0, 4, 1, 5, 0, 11, 0, 8, 0, 7, 0, 25, 0, 16, 0, 26, 0, 25, 2, 4, 0, 5, 0, 27, 0, 28, 0, 27, 1, 28, 1, 9, 0, 27, 0, 28, 0, 5, 1, 29, 0, 31, 0, 31, 0, 4, 0, 13, 0, 32, 0, 25, 1, 32, 1, 32, 0, 18, 0, 21, 0, 0, 1 )
